<!-- START CONTAIN DBLE COL -->
<!-- START CONTAIN DBLE COL LEFT-->
<div id="contain-left" class="col">
	<h3>What is Dancer?</h3>
	<p>Dancer is a simple but powerful web application framework for Perl.</p>

	<h3>Key features</h3>
	
	<!-- START LIST TYPE VERTICAL -->
	<ul>
		<li><strong>Dead Simple</strong> - Intuitive, minimalist and very expressive syntax.</li>
		<li><strong>Flexible</strong> - PSGI support, plugins and modular design allow for strong scalability.</li>
		<li><strong>Few dependencies</strong> - Dancer depends on as few CPAN modules as possible making it easy to install.</li>
	</ul>

	<!-- END LIST TYPE VERTICAL -->
	
</div>
<!-- END CONTAIN DBLE COL LEFT-->

<!-- START CONTAIN DBLE COL RIGHT-->
<div id="contain-right" class="col">

<div style="height: 260px;">


<style>
#slideshow P, #slideshow LI   { font-size: 11px; }
#slideshow PRE { font-size: 10px; }
#slideshow P { padding: 0px; margin: 0px; }
</style>

<div id="slideshow">

<div>
            <h3>Prepare your moves... and dance!</h3>

            <p>
            Dancer has been designed as a Perl web framework which is easy and
            intuitive to get to grips with:
            </p>
            
            <ul class="clearme listreset dbc">

    <li>
            <pre class="prettyprint" style="margin-top: 1em; margin-bottom: 2em;">
    #!/usr/bin/env perl
    use Dancer2;

    get '/' =&gt; sub {
        "Hello World!"
    };

    dance;
    </pre>
            </li>

            <li>
            <pre style="margin-top: 1em;">
    $ plackup bin/app.psgi &
    ...
    $ curl https://localhost:5000/
    Hello world!
    </pre>
            </li>

            </ul>

    <p>
    Getting started with Dancer is easy, yet it provides everything you need to
    write your web applications with ease!
    </p>

</div><!-- end slide1 div -->

<div style="display:none">
    <h3>Wide template support</h3>

    <p>
    Dancer can be used with a wide variety of templating systems, including:
    </p>
    <br />
    
    <ul class="clearme listreset dbc">
    <li>

    <ul>
        <li>Template Toolkit</li>
        <li>Template::Flute</li>
        <li>HTML::Template</li>
        <li>Template::Tiny</li>
        <li>Mason</li>
        <li>Template::Alloy</li>
    </ul>
    </li>

    <li>
    <ul>
        <li>HTML::CTPP2</li>
        <li>Tenjin</li>
        <li>Text::Haml</li>
        <li>Text::Caml</li>
        <li>Mojo::Template</li>
        <li>Template::Declare</li>
    </ul>
    </li>
    </ul>

    <p>
    Support for many more template engines is available, and it's easy to write
    a Dancer2::Template::* wrapper to add support for your favourite
    engine if it's not already available.
    </p>

</div><!-- end slide2 div -->

<div style="display:none">
    <h3>Easy database interaction</h3>

    <p>
    If you're using a Perl web framework, you want the easy stuff taken care of
    for you, so you can write the interesting stuff.  The same applies to
    database access - it should be simple and non-tedious.
    </p>

        <p><strong>ORM with DBIx::Class</strong></p>
        <p>Dancer2::Plugin::DBIC provides easy database access using DBIx::Class:</p>
<pre class="prettyprint">
get '/profile/:id' => sub {
    my $user = schema->resultset('Users')->find(params->{id});
    ....
};
</pre>

        <p><strong>Or easy DBI database access</strong></p>
        <p>Dancer2::Plugin::Database manages your database connections, providing an
        augmented DBI database handle for you to use:</p>
<pre class="prettyprint">
get '/profile/:id' => sub {
    my $user = database->quick_select('Users', { id => $params->{id} });
    ...
};
</pre>
    
    <p>Either way, we've got you covered.</p>

</div>

<div style="display: none">
    <h3>Automatic serialisation for AJAX/APIs</h3>

    <p>Just enable one of the built-in seralizers and any references your routes
    return will automatically be serialised to JSON, XML, YAML - whatever you
    need.  Use the Mutable serializer and the format can even be selected by the
    user making the request based on an &quot;Accept&quot; HTTP header.
    </p>

<pre class="prettyprint">
ajax '/getloadavg' => sub {
    return {
        timestamp => time(),
        loadavg   => ( Unix::Uptime->load )[0],
    };
};
</pre>

    <p>The above example simply returns a hashref from the route handler; the
    serializer takes care of turning it into the desired format (e.g. JSON) and
    returning it to the user.
    </p>

    <p>(The example comes from the <a
    href="https://advent.perldancer.org/2011/14">Dynamic AJAX charting with
    Dancer</a> 2011 Advent Calendar</a> post.)</p>

</div>

<div style="display: none">
    <h3>Easy session support</h3>
    <p>
    Session support is in-built, with a wide choice of session storage methods:
    </p><br />

    <ul>
    <li>YAML/JSON/Storable files on disc</li>
    <li>Memcached</li>
    <li>DBI</li>
    <li>MongoDB</li>
    <li>Redis</li>
    <li>Encrypted cookies</li>
    <li>DBIx::Class</li>
    </ul>
</div>

<div style="display:none">
    <h3>Extensible with plugins and engines</h3>

    <p>
    There's a wide range of plugins available on CPAN to provide useful extra
    features to make writing your applications even eaiser, and support for a
    wide range of template engines, logging methods, session storage methods,
    serialisers...
    </p>

    <p>
    Just <a href="https://metacpan.org/search?q=Dancer2%3A%3APlugin%3A%3A">
    search CPAN</a> and see!
    </p>
</div>


</div><!-- end slideshow div -->

</div><!-- end slide panel holder div -->


	<ul class="clearme listreset dbc">
		<li><a href="<% latest.download_url %>" id="contain-download">
                <% latest.short_version %>&nbsp;</a></li>
	<li>You can also follow Dancer on <a
        href="https://github.com/PerlDancer/Dancer2">GitHub</a> and on <a href="https://twitter.com/PerlDancer">Twitter</a></li>
	</ul>
	

</div>
<!-- END CONTAIN DBLE COL RIGHT-->
<!-- END CONTAIN DBLE COL -->


<div id="testimonials" style="">
	
	<h3><a href="/testimonials">What people say about Dancer</a>...</h3>

<br clear="both" />
<!-- adjust height of this div to fit longest quote -->
<div style="height: 100px;">
<% FOREACH testimonial = testimonials %>
    <% IF loop.first %>
    <p>
    <% ELSE %>
    <p style="display: none">
    <% END %>
    <cite>
    <% testimonial.text %>
    </cite>
    - <% IF testimonial.source_url %>
    <a href="<% testimonial.source_url %>">
    <% END %>
    <% testimonial.source %>
    <% IF testimonial.source_url %></a><% END %>
    </p>

<% END %>
</div>
</div>

<script>
$(document).ready(function(){
    / * set up testimonials rotation */
    $('#testimonials P');
    setInterval(function(){
        $('#testimonials P').filter(':visible').fadeOut(1000,function(){
            if($(this).next('P').size()){
                $(this).next().fadeIn(750);
            }
            else{
                $('#testimonials P').eq(0).fadeIn(750);
            }
        });
    },12000);    
 
    /* And set up slideshow rotation */
    $('#slideshow DIV');
    setInterval(function(){
        $('#slideshow DIV').filter(':visible').fadeOut(1000,function(){
            if($(this).next('DIV').size()){
                $(this).next().fadeIn(750);
            }
            else{
                $('#slideshow DIV').eq(0).fadeIn(750);
            }
        });
    },12000);    
       
});
</script>


<!-- Hackish mouseover pre-load -->
<img src="/images/dcr-contain-bkg-download-hover.jpg" style="display:none">



